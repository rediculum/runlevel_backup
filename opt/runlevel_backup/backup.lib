# This is the sourced library for the runlevel backup scripts
#
# Fri Dec  3 10:42:04 CET 2010 / hanr
# Sat Jul  2 14:13:58 CET 2011 / added keychain support for ssh-agents
# Tue May  7 16:40:55 CEST 2013 / changed Database (MySQL/PG/LDAP) backup to dumps
# Fri Apr  5 13:24:36 CEST 2019 / outsourced customizable variables into backup.conf file
# 

### Variables
RDIFFBIN="/usr/bin/rdiff-backup"
RDIFFPARAMS="--print-statistics --create-full-path"
TMPFILE="/tmp/backup_$HOSTNAME.sh.tmp"                     # Complete path with filename for mail content
DRYRUN=
TXT01="#########################################################################################"


### Functions
function f_keychain()
{
	if [ -f ~/.keychain/$HOSTNAME-sh ]; then
		. ~/.keychain/$HOSTNAME-sh
	else
		f_error "No keychain found on this system"
	fi
}

function f_mysqldump()
{
	echo $TXT01 >>$TMPFILE; echo "# MySQL Backup" >>$TMPFILE; echo $TXT01 >>$TMPFILE
	test -d $MYSQLBACK || mkdir -p $MYSQLBACK
	DATABASES=`echo "show databases;" |mysql -u $MYSQLUSER --password=$(echo $MYSQLPASS) |grep -v ^Database`
	for DATABASE in $DATABASES; do
		echo "Dumping DB: $DATABASE" >>$TMPFILE
		mysqldump -u $MYSQLUSER --password=`echo $MYSQLPASS` $DATABASE > $MYSQLBACK/$DATABASE.dmp
	done
}

function f_postgresqldump()
{
	echo $TXT01 >>$TMPFILE; echo "# PostgreSQL Backup" >>$TMPFILE; echo $TXT01 >>$TMPFILE
	test -d $PGSQLBACK || su - postgres -c "mkdir -p $PGSQLBACK"
	DATABASES=`su - postgres -c "psql -l |grep UTF" |awk '{print $1}'`
	for DATABASE in $DATABASES; do
		echo "Dumping DB: $DATABASE" >>$TMPFILE
		su - postgres -c "pg_dump -F c -b -f $PGSQLBACK/$DATABASE.dmp $DATABASE"
	done
}

function f_ldapbackup()
{
	echo $TXT01 >>$TMPFILE; echo "# LDAP Backup" >>$TMPFILE; echo $TXT01 >>$TMPFILE
	test -d $LDAPBACK || mkdir -p $LDAPBACK
	sudo -H /usr/sbin/slapcat |egrep -v "structuralObjectClass|entryUUID|creatorsName|createTimestamp|entryCSN|modifiersName|modifyTimestamp" > $LDAPBACK/runlevel.ldif
	echo "`grep "^dn:" $LDAPBACK/runlevel.ldif |wc -l` DN entries saved" >>$TMPFILE
}

function f_sendmail()
{
        if [ $DRYRUN ]; then
                cat $TMPFILE
        else
                cat $TMPFILE |mailx -a "From:$FROM" -s "$HOSTNAME Backup" $EMAIL
        fi
}

function f_error()
{
        printf "!!! Skipped !! $1 (`date +"%H:%M:%S"`)\n$TXT01\n" >$TMPFILE
        f_sendmail
        exit 1
}

